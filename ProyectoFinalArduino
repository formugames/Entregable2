/*
    REALIZADO POR:
    -- Alex Santiago Betancourth Obando
    -- Julian Andres Gil 
    --fredy junior ortega garcia
*/

// inclucion de librerias necesarias
#include "AsyncTaskLib.h"
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <EEPROM.h>
#include <RotaryEncoder.h>

#define DEBUG(a) Serial.print(millis()); Serial.print(": "); Serial.println(a); // definicion del serial debug

#pragma region Definiciones

// definicion de umbrales de sensores
byte umb_temp_alta = 30;
byte umb_temp_baja = 18;
byte umb_temp_alarma  = 40;
int umb_luz = 34;
int umb_sonido = 34;

// definicion de umbrales de sensores default
byte def_umb_temp_alta = 30;
byte def_umb_temp_baja = 18;
byte def_umb_temp_alarma  = 40;
int def_umb_luz = 34;
int def_umb_sonido = 34;


//variables keypad
const byte ROWS = 4; //four rows
const byte COLS = 3; //three columns
char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};
byte rowPins[ROWS] = {13, 10, 9, 8}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {7, 6, 5}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);


//variables contraseña
char clave[4] = {'1', '2', '3', '4'}; // Aqui va la clave, Para cambiar el tamaño de la clave se debe modificar el array
int posicion = 0;  // necesaria para contar los dijitos de la clave
int cursor = 0;    // posicion inicial de la clave en el LCD
int intentos = 0;   //para contar las veces de clave incorrecta
bool f_clave_correcta = false;

//declaraciones de auxiliares
bool flag_start_seguridad = true;
bool flag_start_configuracion = true;
bool flag_start_monitoreo = true;

unsigned long tiempo = 0;
byte pos_memoria = 0;


// pines para LCD
const int rs = 12, en = 11, d4 = 31, d5 = 32, d6 = 33, d7 = 34;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// definicion de los pines para el LEDrgb
int ledRojo = 23;  // pin para el LED rojo * cambiar pines del led a pwm para rgb completo en analogo
int ledVerde = 24; // pin para el LED verde
int ledAzul = 25;  // pin para el LED azul

//pines para el encoder
#define clkPin 2
#define dtPin 3
#define swPin 26
int encoderVal = 0;
int valor_encoder();
RotaryEncoder encoder(clkPin, dtPin, RotaryEncoder::LatchMode::TWO03);


// Variables para el sensor de luz
#define pin_photo A0
int photo_value = 0;
void read_photoresistor(void);



// VAriables para el sensor de temperatura
#define pin_temp A1
#define beta 4090
#define resistance 10
float temp_value = 0.0;
float temperatura = 0.0;
void read_temperature(void);
int max_temp = 50;
int min_temp = 0;

// Variables para el sensor de sonido
#define pin_sound A2
int sound_value = 0;
void read_sound(void);

//variables para el control del buzzer analogico
#define pin_buzz 4
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
int duraciones[] = { 8, 8, 4, 4 };    // array con la duracion de cada nota
int melodia[] = { NOTE_B6, NOTE_C7, NOTE_CS7, NOTE_D7 };//// array con las notasa a reproducir

// Definiciones de las tareas asincronas
AsyncTask asyncTaskTemp(2000, true, read_temperature);
AsyncTask asyncTaskPhoto(1000, true, read_photoresistor);
AsyncTask asyncTasksound(100, true, read_sound);


#pragma endregion

#pragma region def_ estados_inputs
// enumerador de los estados finitos
enum estado
{
  estado_seguridad,// sistema bloqueado
  estado_configuracion,// estado de configuracion
  estado_monitoreo,//Donde suceden los hechos
  estado_alarma// estado de alarma
};

estado currentState; // Variable global para control de estados

enum Input
{
  Unknown, // entrada en vacio
  reset,  // entrada de reset
  forward, // entrada para continuar al siguiente estado
  Backward // entrada para retroceder un estado
};
Input currentInput; // Variable global para control de entradas


#pragma endregion

#pragma region metodos_sensores

void read_photoresistor()// Funcion encargada de leer y procesar la informacion del sensor de luz
{
  photo_value = analogRead(pin_photo);// se lee en el pin analogo de el sensor
  // lcd.setCursor(0, 0);
  // lcd.print("PHOTO:");
  // lcd.print(photo_value); // se muestra en pantalla el valor arrojado por el sensor
}

void read_temperature()// Funcion encargada de leer y procesar la informacion del sensor de temperatura
{
  // se usa la sigiente formula para convertir la informacion dada por el sensor en grados centigrados
  long a = 1023 - analogRead(pin_temp);
  temperatura = beta / (log((1025.0 * 10 / a - 10) / 10) + beta / 298.0) - 273.0;
  //lcd.setCursor(0, 1);
  // lcd.print("temp:");
  //lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
}

void read_sound()// Funcion encargada de leer y procesar la informacion del sensor de sonido
{
  sound_value = analogRead(pin_sound);// se lee en el pin analogo de el sensor
  // lcd.setCursor(0, 0);
  // lcd.print("S:");
  // lcd.print(sound_value); // se muestra en pantalla el valor arrojado por el sensor
}



#pragma endregion


void setup()
{
  //se inicializan los pines del Encoder como entradas
  pinMode(clkPin, INPUT);
  pinMode(dtPin, INPUT);
  pinMode(swPin, INPUT);
  digitalWrite(swPin, HIGH);
  //se inicializan los pines del led  y buzzer como salidas
  //leds
  pinMode(ledRojo, OUTPUT);
  pinMode(ledVerde, OUTPUT);
  pinMode(ledAzul, OUTPUT);
  //buzzer
  pinMode(pin_buzz, OUTPUT);

  Serial.begin(9600);
  Serial.println("inicio de sistema");// se inicia el serial para debug

  // inicializacion del lcd
  lcd.begin(16, 2);
  lcd.clear();

  // inicializacion de las tareas asincronas
  asyncTaskTemp.Start();
  asyncTaskPhoto.Start();
  asyncTasksound.Start();

  currentState =  estado::estado_seguridad; // se inicializa la maquina en estado inicial
  currentInput = Input::Unknown; // se inicializa la entrada en vacio


}

void loop()
{

 char key = keypad.getKey(); //se lee el teclado para detectar las opciones reset y back en todo momento
  if (key) {
      press_key_static(key);
  }

  actualizar_estado(); // actualiza la maquina de estados segun la entrada de temperatura

}



void actualizar_estado(){ // se hace la seleccion de funciones a realizar segun el estado actual y la entrada

  switch (currentState)
  {
    case estado::estado_seguridad:  // actualiza el estado de la maquina partiendo desde el estado 1
        switch (currentInput){
        case Input::Unknown: funcion_seguridad(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
        case Input::reset: //********** RESET
            currentState = estado::estado_seguridad; 
            flag_start_seguridad  = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
           break;
        case Input::forward: //**********forward
            currentState = estado::estado_configuracion; 
            flag_start_seguridad  = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
          break;
        case Input::Backward: //********** BACK
            currentState = estado::estado_seguridad; 
            flag_start_seguridad  = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
           break;
        default: break;
      }
      break;
    case estado::estado_configuracion: // actualiza el estado de la maquina partiendo desde el estado 2
        switch (currentInput){
          case Input::Unknown: funcion_configuracion(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset: //********** RESET
              currentState = estado::estado_seguridad; 
              flag_start_configuracion  = true;
              f_clave_correcta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward: //**********forward
              currentState = estado::estado_monitoreo; 
              flag_start_configuracion  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward: //********** BACK
              currentState = estado::estado_seguridad; 
              flag_start_configuracion  = true;
              f_clave_correcta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
       break;
    case estado::estado_monitoreo: // actualiza el estado de la maquina partiendo desde el estado 3
     switch (currentInput){
          case Input::Unknown: funcion_monitoreo(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset: //********** RESET
              currentState = estado::estado_seguridad; 
              flag_start_monitoreo  = true;
              f_clave_correcta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward: //**********forward
              currentState = estado::estado_alarma; 
              flag_start_monitoreo  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward: //********** BACK
              currentState = estado::estado_configuracion; 
              flag_start_monitoreo  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
      break;
    case estado::estado_alarma: // actualiza el estado de la maquina partiendo desde el estado 4
     switch (currentInput){
          case Input::Unknown: funcion_alarma(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset: //********** RESET
              currentState = estado::estado_seguridad;
              f_clave_correcta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward: //**********forward
              currentState = estado::estado_monitoreo; 
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward: //********** BACK
              currentState = estado::estado_monitoreo; 
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
      break;
    default: break;
  }
}


 void press_key_static(char key) { // este metodo me ejecuta la lectura de la entrada desde las teclas 8 (back) y 9 (reset)
  if (key == '7') {
     lcd.clear();
    lcd.setCursor(0, 0);
      lcd.print("BACK");
      Serial.println("BACK");
      delay(500);

        currentInput = Input::Backward; //********** BACK

  } 
  if (key == '9') {
     lcd.clear();
    lcd.setCursor(0, 0);
      lcd.print("RESET");
      Serial.println("RESET");
      delay(500);
       currentInput = Input::reset; //********** RESET

  }

}

#pragma region estado_seguridad
void start_seguridad(){
  posicion = 0;
  intentos = 0;
  cursor = 0;


  // mensaje inicial
  lcd.setCursor(0, 0);
  lcd.print(" SISTEMA DE");
  lcd.setCursor(0, 1);
  lcd.print("  SEGURIDAD !!");
  delay(400);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ingrese la clave");
  lcd.setCursor(0, 1);

}

void funcion_seguridad() {// funcion para el estado de seguridad
  Serial.println(" maquina en estado seguridad"); // se imprime en el debug el estado actual

  if (flag_start_seguridad) {
    start_seguridad();
    flag_start_seguridad = false;
  }

  char key = keypad.getKey();
  if (key) {
    press_password(key);
  }
  if (f_clave_correcta) {
    currentInput = Input::forward;
    f_clave_correcta = false;
    lcd.clear();
    lcd.setCursor(0, 0);
  }
}

void press_password(char key) {// funcion que valida cada digito de la contraseña



  lcd.print("*");
  cursor++;
  if (key == clave[posicion] && cursor <= 4) {
    posicion ++; // aumentamos posicion si es correcto el digito
    if (posicion == 4) { // comprobamos que se han introducido los 4 correctamente
      clave_correcta();
    }
  } else {
    posicion = 0;
  }
  if (cursor >= 4) {
    clave_incorrecta();
    if (intentos == 3 ) {
      sistema_bloqueado();
    }
  }

}

void clave_correcta() {//funcion para cuando se ingresa la clave correctamente

  lcd.clear();
  lcd.setCursor(0, 0);     // situamos el cursor el la pos 0 de la linea 0.
  lcd.print("Clave correcta!! "); // escribimos en LCD
  digitalWrite(ledVerde, HIGH); // encendemos el verde
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);     // situamos el cursor el la pos 0 de la linea 0.
  lcd.print("bienvenido!");
  secuencia_led();
  f_clave_correcta = true;
  posicion = 0;
  intentos = 0;
  cursor = 0;
  lcd.clear();
  lcd.setCursor(0, 0);     // situamos el cursor el la pos 0 de la linea 0.
  delay(1000);


}

void clave_incorrecta() { //funcion para cuando se ingresa la clave incorrecta

  cursor = 0;
  posicion = 0;
  intentos++;
  lcd.setCursor(0, 1);     // situamos el cursor el la pos 0 de la linea 0.
  lcd.print("Clave erronea!");         // escribimos en LCD
  //led amarillo
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW);
  delay(1000);
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ingrese la clave");
  lcd.setCursor(0, 1);
}

void sistema_bloqueado() {// funcion que da retardo por agotar los intentos de ingrsar la clave
  intentos = 0;
  lcd.clear();
  lcd.setCursor(0, 0);     // situamos el cursor el la pos 0 de la linea 0.
  lcd.print("Clave bloqueada");         // escribimos en LCD
  lcd.setCursor(0, 1);
  lcd.print("Espere...");
  //led rojo
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW);
  delay(2000);
  digitalWrite(ledRojo, LOW);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ingrese la clave");
  lcd.setCursor(0, 1);
}



#pragma endregion

#pragma region estado_configuracion
void start_configuracion(){
 pos_memoria =0;
 encoderVal = 0;

}

void funcion_configuracion() {// funcion para el estado de configuracion


  Serial.println(" maquina en estado de configuracion");

  if (flag_start_configuracion) {
   start_configuracion();
    flag_start_configuracion = false;
  }
   mostrar_menu_1();

  char key = keypad.getKey();
  if (key) {

    press_menu(key);
  }



}

void mostrar_menu_1(){
  Serial.println(" maquina en estado conf menu 1");
 lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("1.Umb Temp High");
  lcd.setCursor(0, 1);
  lcd.print("2.Umb Temp Low");
  bool temp_while = true;
  // char key = keypad.getKey();

 while (temp_while) {
    char key = keypad.getKey();

 if (key) {

   if(key == '#'){
    mostrar_menu_2();    //-------- menu derecha
    temp_while = false;
   }
   if(key== '*'){
    mostrar_menu_1();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }

  }

}
void mostrar_menu_2(){
  Serial.println(" maquina en estado conf menu 2");

   lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("3.Umb Temp Alarm");
  lcd.setCursor(0, 1);
  lcd.print("4.Umb ligth");
  bool temp_while = true;

 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_3();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_1();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }

  }


}
void mostrar_menu_3(){
    Serial.println(" maquina en estado conf menu 3");

    lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("5.Umb sound");
  lcd.setCursor(0, 1);
  lcd.print("6.Continuar a M");
  bool temp_while = true;

 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_4();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_2();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }

  }

}
void mostrar_menu_4(){
      Serial.println(" maquina en estado conf menu 4");

       lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("7.reset/back");
  lcd.setCursor(0, 1);
  lcd.print("8.reset umb");
  bool temp_while = true;

 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_4();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_3();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }

  }

}

void press_menu(char key) {// hace la seleccion correspondiente al numero dijitado en estado de configuracion

  switch (key)
  {
    case '1': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 1 ");
        delay(1000);
        conf_temp_alta();
      };   break;
    case '2': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 2 ");
        delay(1000);
        conf_temp_baja();
      };   break;
    case '3': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 3 ");
        delay(1000);
        conf_temp_alarma();
      };   break;
    case '4': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 4 ");
        delay(1000);
        conf_umb_luz();
      };   break;
    case '5': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 5 ");
        delay(1000);
        conf_umb_sonido();
      };   break;
    case '6': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 6 ");
        delay(1000);
        currentInput = Input::forward;
        lcd.clear();
        lcd.setCursor(0, 0);
              
      };   break;
    case '7': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 7 ");
        delay(1000);
        currentInput = Input::reset;
        lcd.clear();
        lcd.setCursor(0, 0); 
       };  
      break;
    case '8': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 8 ");
        delay(1000);
        reset_valores();
      };   break;
    case '9': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("RESET ");
        delay(1000);
        currentInput= Input::reset;
      };   break;
    default: break;
  }
}

void reset_valores(){
   pos_memoria =0;
   EEPROM.update(pos_memoria, def_umb_temp_alta);
    pos_memoria =1;
   EEPROM.update(pos_memoria, def_umb_temp_baja);
    pos_memoria =2;
   EEPROM.update(pos_memoria, def_umb_temp_alarma);
    pos_memoria =3;
   EEPROM.update(pos_memoria, def_umb_luz);
    pos_memoria =5;
   EEPROM.update(pos_memoria, def_umb_sonido);
   lcd.setCursor(0, 1);
        lcd.print("reset defaul");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
        flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
}

void conf_temp_alta() {// funcion que establese el umbral de temperatura alta
  pos_memoria = 0;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alta = temp_mem;

  }
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP HIGH");
  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();

    int newPos = encoder.getPosition();
    if (pos != newPos) {

      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_alta = umb_temp_alta + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_alta = umb_temp_alta - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_alta);
    tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }

    if (key == '0') {
      if (umb_temp_alta > umb_temp_baja && umb_temp_alta < umb_temp_alarma && umb_temp_alta < max_temp && umb_temp_alta > min_temp) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }

    }
  }
  EEPROM.update(pos_memoria, umb_temp_alta);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);

}
void conf_temp_baja() {// funcion que establese el umbral de temperatura baja
  pos_memoria = 1;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_baja = temp_mem;

  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP LOW");
  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();

    int newPos = encoder.getPosition();
    if (pos != newPos) {

      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_baja = umb_temp_baja + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_baja = umb_temp_baja - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_baja);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }

    if (key == '0') {
      if (umb_temp_baja < umb_temp_alta && umb_temp_baja < umb_temp_alarma && umb_temp_baja < max_temp && umb_temp_baja > min_temp) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }

    }
  }
  EEPROM.update(pos_memoria, umb_temp_baja);
  flag_start_seguridad = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);

}
void conf_temp_alarma() {// funcion que establese el umbral de temperatura de alarma
  pos_memoria = 2;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alarma = temp_mem;

  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP ALARM");

  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();

    int newPos = encoder.getPosition();
    if (pos != newPos) {

      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_alarma = umb_temp_alarma + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_alarma = umb_temp_alarma - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_alarma);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }

    if (key == '0') {
      if (umb_temp_alarma > umb_temp_alta && umb_temp_alarma > umb_temp_baja && umb_temp_alarma < max_temp && umb_temp_alarma > min_temp) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }

    }
  }
  EEPROM.update(pos_memoria, umb_temp_alarma);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);


}
void conf_umb_luz() {// funcion que establese el umbral de luz
  pos_memoria = 3;
  int temp_mem;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_luz = temp_mem;

  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB LIGHT");

  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();

    int newPos = encoder.getPosition();
    if (pos != newPos) {

      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_luz = umb_luz + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_luz = umb_luz - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_luz);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }

    if (key == '0') {
      if (umb_luz < 1023 && umb_luz > 0) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("UMB incorrecto");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }

    }
  }
  EEPROM.put(pos_memoria, umb_luz);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);

}
void conf_umb_sonido() {// funcion que establese el umbral de sonido

  pos_memoria = 5;
  int temp_mem;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_sonido = temp_mem;

  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB SOUND");


  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();

    int newPos = encoder.getPosition();
    if (pos != newPos) {

      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_sonido = umb_sonido + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_sonido = umb_sonido - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_sonido);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }

    if (key == '0') {
      if (umb_sonido < 1023 && umb_sonido > 0) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("UMB incorrecto");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }

    }
  }
  EEPROM.put(pos_memoria, umb_sonido);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);

}

#pragma endregion

#pragma region estado_monitoreo
void start_monitoreo(){
     leer_Eprom();
}

void funcion_monitoreo() {// funcion para el estado de bloqueo
  Serial.println(" maquina en estado monitoreo"); // se imprime en el debug el estado actual

 
  if (flag_start_monitoreo) { 
    start_monitoreo();
    flag_start_monitoreo = false;
  }

    // se actualizan las tareas asincronas
  asyncTaskTemp.Update();
  asyncTaskPhoto.Update();
  asyncTasksound.Update();

  

  
  
  
  digitalWrite(swPin, HIGH);// se hace el senso del swich del encoder por 3 segundos para salir de run a configuracion

  if (digitalRead(swPin) == LOW)
  {
    digitalWrite(swPin, HIGH);

    tiempo = millis();
    while (millis() < tiempo + 3000UL) {
    }

    if (digitalRead(swPin) == LOW)
    {
    currentInput = Input::Backward;
    }
  }


   Serial.println(photo_value);
  Serial.println(sound_value);


  // seleccion de funciones segun temperatura
  if (temperatura <= umb_temp_baja) {
    funcion_temp_baja();
  }
  if (temperatura > umb_temp_baja && temperatura <= umb_temp_alta ) {
    funcion_temp_normal();
  }
  if (temperatura > umb_temp_alta && temperatura < umb_temp_alarma ) {
    funcion_temp_alta();
  }
  if (temperatura >= umb_temp_alarma  ) {
   currentInput = Input::forward;
  
  }


  if (photo_value <  umb_luz) {// muestra un mensaje en pantalla si se supera el umbral de luz
    tiempo = millis();
    while (millis() < tiempo + 300UL) {
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("hum sensor luz ");
    tiempo = millis();
    while (millis() < tiempo + 800UL) {
    }
  }
  
  if (sound_value >  umb_sonido) {// muestra un mensaje en pantalla si se supera el umbral de sonido
    tiempo = millis();
    while (millis() < tiempo + 300UL) {
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("hum sensor sound ");
    tiempo = millis();
    while (millis() < tiempo + 800UL) {
    }
  }

}

void funcion_temp_baja() { // funciones de maquina en estado Run con temperatura baja
  Serial.println(" maquina en estado monitoreo temp baja"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("ph:");
  lcd.print(photo_value);
  lcd.setCursor(7, 1);
  lcd.print("s:");
  lcd.print(sound_value);
  lcd.setCursor(12, 0);
  lcd.print("A");// se imprime en pantalla el indicador de estado
  tiempo = millis();
  while (millis() < tiempo + 500UL) {// crea un retardo para la correcta visualizacion
  }


}

void funcion_temp_normal() { // funciones de maquina en estado Run con temperatura normal
  Serial.println(" maquina en estado monitoreo temp normal"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, HIGH); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("photo:");
  lcd.print(photo_value);
  lcd.setCursor(7, 1);
  lcd.print("s:");
  lcd.print(sound_value);
  lcd.setCursor(12, 0);
  lcd.print("B"); // se imprime en pantalla el indicador de estado
  tiempo = millis();
  while (millis() < tiempo + 100UL) {// crea un retardo para la correcta visualizacion
  }
}

void funcion_temp_alta() { // funciones de maquina en estado Run con temperatura alta
  Serial.println(" maquina en estado monitoreo temp alta"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("photo:");
  lcd.print(photo_value);
  lcd.setCursor(7, 1);
  lcd.print("s:");
  lcd.print(sound_value);
  lcd.setCursor(12, 0);
  tiempo = millis();
  while (millis() < tiempo + 100UL) {// crea un retardo para la correcta visualizacion
  }
}


void leer_Eprom() {// lee los valores de los umbrales almacenados en la memoria
  // se establese los indices de memoria de la siguente manera
  // 0 umb_temp_alta
  // 1 umb_temp_baja
  // 2 umb_temp_alarma
  // 3,4 umb_luz    // se asgnan 2 bytes por ser enteros
  // 5,6 umb_sonido

  pos_memoria = 0;
  int temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alta = temp_mem;
  }
  pos_memoria = 1;
  temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_baja = temp_mem;
  }
  pos_memoria = 2;
  temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alarma = temp_mem;
  }
  pos_memoria = 3;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_luz = temp_mem;
  }
  pos_memoria = 5;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_sonido = temp_mem;
  }
}


#pragma endregion



#pragma region estado_de_alarma

void funcion_alarma() { // funciones de maquina en estado run con temperatura de alarma

  Serial.println(" maquina en estado de alarma"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW); // led en azul
  delay(200);
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW); // led rojo

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(12, 0);
  lcd.print("D"); // se imprime en pantalla el indicador de estado
  lcd.setCursor(0, 1);
  lcd.print("ALARMA");

  sonar_buzz(); // se hace sonar el buzzer en señal de alarma
  secuencia_led(); // se muestra una secuencia de led en rojo y azul en señal de alarma

  tiempo = millis(); // se da tiempo de espera de alarma
  while (millis() < tiempo + 2000UL) {// crea un retardo para la duracion del estado ***********

  currentInput = Input::forward;

}
}


void secuencia_led() { //secuencia de led intercalada en azul y rojo
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW);//rojo
  delay(200);
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW);//azul
  delay(200);
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW);//rojo
  delay(200);
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW);//azul
  delay(200);
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, LOW);//apaga led
  digitalWrite(ledVerde, LOW);
}


void sonar_buzz() { // funcion encargada de hacer sonar el buzzer
  for (int i = 0; i < 3; i++) {      // bucle repite 4 veces, 1 por cada nota
    int duracion = 1000 / duraciones[i];    // duracion de la nota en milisegundos
    tone(pin_buzz, melodia[i], duracion);  // ejecuta el tono con la duracion
    int pausa = duracion * 1.30;      // calcula pausa
    delay(pausa);         // demora con valor de pausa
    noTone(pin_buzz);        // detiene reproduccion de tono
  }
}


#pragma endregion






//FIN DEL PROGRAMA
